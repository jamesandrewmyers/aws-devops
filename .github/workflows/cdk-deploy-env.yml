name: cdk-deploy-env (reusable)

on:
  workflow_call:
    inputs:
      artifact-run-id:
        description: "If provided, fetch artifact from this workflow run id (in the caller repo). If empty, use actions/download-artifact for current run."
        required: false
        type: string
        default: ""
      artifact-name:
        description: "Artifact name uploaded by the caller (upload-artifact name)."
        required: false
        type: string
        default: "lambda-bundle"
      cdk-dir:
        description: "Path to the CDK app. Can be in the caller repo or in the central aws-devops repo (resolution tries several common locations)."
        required: false
        type: string
        default: "cdk"
      stack:
        description: "CDK stack to deploy. If empty, deploys --all."
        required: false
        type: string
        default: ""
      aws-account:
        description: "Target AWS account id (informational)."
        required: true
        type: string
      aws-region:
        description: "AWS region to target."
        required: false
        type: string
        default: "us-west-2"
      role-to-assume:
        description: "Optional: ARN of the role to assume via OIDC for AWS permissions. If empty, the secret GITHUB_OIDC_ROLE_ARN will be used."
        required: false
        type: string
        default: ""

    secrets:
      GITHUB_OIDC_ROLE_ARN:
        required: true
        description: "Fallback role ARN to assume via OIDC when inputs.role-to-assume is not provided."

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.aws-account }}
    steps:

      - name: Checkout caller repository (consumer)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve role to assume (inputs preferred, else secret)
        id: resolve_role
        run: |
          set -euo pipefail
          INP_ROLE="${{ inputs.role-to-assume }}"
          SECRET_ROLE="${{ secrets.GITHUB_OIDC_ROLE_ARN }}"
          if [ -n "$INP_ROLE" ]; then
            echo "Using role from inputs"
            echo "role=$INP_ROLE" >> "$GITHUB_OUTPUT"
          else
            echo "Using role from secret GITHUB_OIDC_ROLE_ARN"
            echo "role=$SECRET_ROLE" >> "$GITHUB_OUTPUT"
          fi

      # Important: configure OIDC BEFORE checking out the central repo to preserve caller token subject
      - name: Configure AWS credentials via OIDC (assume resolved role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.resolve_role.outputs.role }}
          aws-region: ${{ inputs.aws-region }}

      - name: Confirm AWS identity
        run: aws sts get-caller-identity --output json

      - name: Checkout aws-devops repo (central CDK/runtime)
        uses: actions/checkout@v4
        with:
          repository: jamesandrewmyers/aws-devops
          path: aws-devops-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download artifact from a different workflow run (if artifact-run-id provided)
        if: ${{ inputs.artifact-run-id != '' }}
        env:
          GITHUB_API: https://api.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ARTIFACT_NAME: ${{ inputs.artifact-name }}
          RUN_ID: ${{ inputs.artifact-run-id }}
        run: |
          set -euo pipefail
          echo "Fetching artifact '$ARTIFACT_NAME' from run id $RUN_ID in repo $REPO"

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -qq
            sudo apt-get install -y -qq jq
          fi

          API_URL="$GITHUB_API/repos/$REPO/actions/runs/$RUN_ID/artifacts"
          resp=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API_URL")

          archive_url=$(echo "$resp" | jq -r --arg name "$ARTIFACT_NAME" '.artifacts[] | select(.name==$name) | .archive_download_url' || true)

          if [ -z "$archive_url" ] || [ "$archive_url" = "null" ]; then
            echo "ERROR: artifact named '$ARTIFACT_NAME' not found in run $RUN_ID"
            echo "Available artifacts in that run:"
            echo "$resp" | jq -r '.artifacts[].name' || true
            exit 1
          fi

          echo "Downloading artifact from: $archive_url"
          curl -L -sS -H "Authorization: Bearer $GITHUB_TOKEN" -o artifact.zip "$archive_url"
          unzip -o artifact.zip -d ./artifact
          echo "Artifact extracted to ./artifact/"

      - name: Download artifact from current run (fallback)
        if: ${{ inputs.artifact-run-id == '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ./artifact

      - name: Resolve CDK directory
        id: resolve_cdk
        run: |
          set -euo pipefail
          INPUT="${{ inputs.cdk-dir }}"
          candidates=(
            "./$INPUT"
            "./iac/$INPUT"
            "./${INPUT}"
            "./iac/cdk"
            "aws-devops-repo/$INPUT"
            "aws-devops-repo/iac/$INPUT"
            "aws-devops-repo/iac/cdk"
            "aws-devops-repo/cdk"
          )
          found=""
          for p in "${candidates[@]}"; do
            if [ -d "$p" ]; then
              echo "Found CDK dir: $p"
              found="$p"
              break
            fi
          done
          if [ -z "$found" ]; then
            echo "ERROR: No CDK directory found. Tried: ${candidates[*]}"
            exit 1
          fi
          echo "cdk_dir=$found" >> "$GITHUB_OUTPUT"

      - name: Install CDK & dependencies (python/node)
        run: |
          set -euo pipefail
          CDK_DIR="${{ steps.resolve_cdk.outputs.cdk_dir }}"
          echo "Installing dependencies in $CDK_DIR (if present)"
          if [ -f "$CDK_DIR/requirements.txt" ]; then
            python -m pip install --upgrade pip
            python -m pip install -r "$CDK_DIR/requirements.txt" || true
          fi
          if [ -f "$CDK_DIR/package.json" ]; then
            (cd "$CDK_DIR" && npm ci --silent) || true
          fi
          npx --no-install cdk --version || true

      - name: Copy artifact into CDK app (if present)
        run: |
          set -euo pipefail
          CDK_DIR="${{ steps.resolve_cdk.outputs.cdk_dir }}"
          if [ -d "./artifact" ]; then
            mkdir -p "$CDK_DIR/artifact"
            cp -R ./artifact/* "$CDK_DIR/artifact/" || true
            echo "Artifact copied into $CDK_DIR/artifact/"
          else
            echo "No ./artifact directory present; continuing without artifact copy."
          fi

      - name: CDK synth
        working-directory: ${{ steps.resolve_cdk.outputs.cdk_dir }}
        env:
          AWS_REGION: ${{ inputs.aws-region }}
          AWS_ACCOUNT: ${{ inputs.aws-account }}
        run: |
          set -euo pipefail
          npx cdk synth

      - name: CDK deploy
        working-directory: ${{ steps.resolve_cdk.outputs.cdk_dir }}
        env:
          AWS_REGION: ${{ inputs.aws-region }}
          AWS_ACCOUNT: ${{ inputs.aws-account }}
        run: |
          set -euo pipefail
          if [ -n "${{ inputs.stack }}" ]; then
            npx cdk deploy "${{ inputs.stack }}" --require-approval never
          else
            npx cdk deploy --all --require-approval never
          fi